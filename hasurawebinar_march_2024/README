# -*- mode: org; -*-

#+STARTUP: indent

#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:nil title:t toc:nil todo:t |:t
#+title: GraphQL & Java
#+subtitle: The State of Tooling
#+date: <2024-03-06 Wed>
#+author: David A. Ventimiglia
#+email: davidaventimiglia@hasura.io
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.2 (Org mode 9.6.15)
#+cite_export:

#+reveal_default_slide_background: ./slide_background.png
#+reveal_highlight_css: %r/plugin/highlight/zenburn.css
#+reveal_init_options: transition:'none', controlsLayout:'edges', progress:false, controlsTutorial:false
#+reveal_mathjax_url: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+reveal_root: https://cdn.jsdelivr.net/npm/reveal.js
#+reveal_theme: black
#+reveal_title_slide_background: ./slide_background.png

* 
#+CAPTION: https://github.com/dventimihasura/davidaventimiglia-talks/tree/master/hasurawebinar_march_2024
#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:qrcode_github.com.png]]

* What

** Goals

- have Java GraphQL + SQL DB
- be non-trivial
- start a conversation

** Non-Goals

- +be done+
- +be correct+
- +start a war+

* Why

Let's move beyond tutorials, "Getting Started" guides, and
"Hello, World!" apps.  Let's solve a real and common problem.  Let's
keep adding bells and whistles.  Let's see what's /really/ involved.
And let's see what works and what doesn't.

* How

** The Context

- [[file:docker-compose.yaml][docker-compose.yaml]] :: nice and easy
- postgres :: useful reference point
- data model :: online retail (accounts, orders, products, etc.)
- Hasura :: [[https://en.wikipedia.org/wiki/Stalking_horse][stalking horse]]

** The Application

- [[https://netflix.github.io/dgs/][+Netflix DGS+]] :: we'll get there
- [[https://www.graphql-java.com/][graphql-java]] :: the foundation
- [[https://spring.io/projects/spring-boot][Spring Boot]] :: the gold standard

** The Architecture

- Model :: üß± POJOs, DAOs, Maps, etc.
- +View+ :: üì∫ the API /is/ the view
- Controller :: üïπ resolvers, data fetchers, etc.

** The Road-Map

- ‚òë Make it Blink :: üí° "naive" approach with graphql-java 
- ‚òê Make it Real :: üòà [[https://hibernate.org/orm/][Hibernate]] that ol' N+1 problem
- ‚òê Make it Modern :: ü§ñ Upgrade to Netflix DGS
- ‚òê Make it Sing :: üé∂ caching, security, observability, etc.

* Steps

** Step 1:  Check out the ~ [[https://github.com/dventimihasura/davidaventimiglia-talks][davidaventimiglia-talks]] ~ repository.

#+begin_src bash
  git checkout \
      https://github.com/dventimihasura/davidaventimiglia-talks.git
#+end_src

** Step 2:  Navigate to ~ [[file:hasurawebinar_march_2024][hasurawebinar_march_2024]] ~ sub-directory.

#+begin_src bash
  cd hasurawebinar_march_2024
#+end_src

** Step 3:  Create a ~setenv.sh~ file.

#+begin_src bash
  cat <<EOF > setenv.sh
  export HGEPORT=8081
  export PGDATABASE=postgres
  export PGHOST=localhost
  export PGPASSWORD=postgres
  export PGPORT=5433
  export PGUSER=postgres
  export SBPORT=8080
  EOF
#+end_src

#+RESULTS:

** Step 4:  Source the ~setenv.sh~ file.

#+begin_src bash
  source setenv.sh
#+end_src

** Step 5:  Launch the Docker Compose services.

#+begin_src bash
  docker-compose up -d
#+end_src

or

#+begin_src bash
  docker compose up -d
#+end_src

** Step 6:  Launch the Spring Boot application.

#+begin_src bash
  mvn clean spring-boot:run
#+end_src

* Tests

#+begin_src graphql :url http://localhost:8080/graphql
query {
  orders(limit: 1) {
    id
    status
    account {
      name
    }
    order_details {
      units
      product {
        name
        price
      }
    }
  }
}
#+end_src

#+RESULTS:
#+begin_example
{
  "data": {
    "orders": [
      {
        "id": "2c0a0c8d-cc54-4a47-8ef6-65cbd8b487bf",
        "status": "processing",
        "account": {
          "name": "Roana Crate"
        },
        "order_details": [
          {
            "units": 4,
            "product": {
              "name": "Zucchini - Green",
              "price": 23
            }
          },
          {
            "units": 3,
            "product": {
              "name": "Sproutsmustard Cress",
              "price": 771
            }
          },
          {
            "units": 7,
            "product": {
              "name": "Wine - Prosecco Valdobienne",
              "price": 220
            }
          },
          {
            "units": 8,
            "product": {
              "name": "Arizona - Green Tea",
              "price": 377
            }
          },
          {
            "units": 6,
            "product": {
              "name": "Plastic Wrap",
              "price": 71
            }
          },
          {
            "units": 9,
            "product": {
              "name": "Ecolab - Ster Bac",
              "price": 227
            }
          },
          {
            "units": 8,
            "product": {
              "name": "Lemonade - Strawberry, 591 Ml",
              "price": 75
            }
          },
          {
            "units": 4,
            "product": {
              "name": "Gherkin",
              "price": 678
            }
          }
        ]
      }
    ]
  }
}
#+end_example
